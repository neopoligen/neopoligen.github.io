-- title

Integration Test

This is the text in the `-- title`` section that comes
after the initial line that gets used for the title itself.

It's available to move around where ever to allow for things
like putting the `-- tldr`` in front of it. 

-- code/

-- todo
-- title: TODO

[] Get the paragraphs in the `-- title`` section places

[] subtitle and subtitle paragraphs

[] `-- title`` titles that can have <<span|<<em|spans>>>> in them

[] Output the source for all sections


-- h1

This is an H1

-- h2

This is an H2

-- h3

This is an H3

-- h4

This is an H4

-- h5

This is an H5

-- h6

This is an H6


-- p
-- preface: Basic Link

Lorem <<link|ipsum dolor|https://www.example.com/>> amet


-- p
-- preface: Internal link via ID

Lorem <<ilink|ipsum dolor|2ba2pzhp>> amet


-- p
-- preface: Link with inline class added

Lorem <<link|ipsum dolor|https://www.example.com/|class: green>> amet


-- p
-- preface: Link with inline spans

Lorem <<em|<<strong|<<link|ipsum dolor|https://www.example.com/>>>>>> amet


-- p
-- preface: Nested spans

Lorem ipsum <<strong|<<strike|fringilla ante>>>> felis


-- p
-- preface: Span With Attribute

Lorem ipsum <<span|lacinia pretium|class: green>> congue


-- p
-- preface: Key Value With Class Shorthand

Lorem ipsum <<c: blue|psum primis>> congue

-- p
-- preface: Custom Named Span 

Lorem ipsum <<x|psum primis>> congue


-- p
-- preface: Shorthand Strong Span

TODO: Finish Shorthand codes

Lorem ipsum `augue enim`` lobortis


-- p
-- preface: Shorthand Strong Span With Attribute

TODO: Get an example working here



-- css
-- template: show
-- preface: This is the CSS from the page that's
-- preface: tied to the above `x`` example


.this_is_what_x_becomes {
  font-size: var(--size-3);
  color: #333;
  font-family: var(--heavy);
  font-style: italic;
  font-weight: bold;
}


-- h3

TODO: Make example of custom span that calls
an ID to get values from a JSON



-- image
-- selfie-in-mirror-spikes-aws-2022-0420-1218-0448
-- class: photo
-- alt: a black and white self portrait taken in 
-- alt: a convex mirror in a hotel room. I'm standing
-- alt: on the bed leaning towards it in the reflection. 
-- alt: Small spokes fan out from the round part of the 
-- alt: mirror like thing fan blades. 

This is a caption for the image

There's also alt text in it


-- list
-- preface: Basic List

- Lorem ipsum aliquam enim, at tincidunt leo 
mauris eget ipsum.

- Phasellus dictum, nulla et sollicitudin porttitor. 
Integer suscipit, erat non ullamcorper porttitor, 
augue felis aliquet tortor, non elementum eros massa 
vel est.

Lectus elit viverra ipsum, vitae iaculis diam nulla sit 
amet nibh.

- Mauris consectetur felis laoreet, bibendum dolor vel, 
porttitor augue.

Nam eget nisi in enim fringilla sodales imperdiet tincidunt 
eros. Praesent justo ex, vestibulum vitae velit ut, consequat pretium risus.


-- list
-- id: strike_list_target
-- title: This Is A Custom Title For The List
-- preface: List w/ Custom Title, ID, Preface, and CSS Strikethrough

- Lorem ipsum lacinia lacus at libero laoreet commodo

- Cras viverra lectus quis dui efficitur suscipit


-- css
-- title: Inline CSS For The Strikethrough Above
-- template: show

#strike_list_target li:nth-child(1) > p {
  text-decoration: line-through;
}


-- notes
-- preface: Basic Notes

- papa

- echo 

- whiskey 

- bravo


-- notes
-- title: This Is A Notes Custom Title And Preface
-- preface: This is a place to be a few notes before the
-- preface: notes.

- foxtrot 

- sierra

- kilo

- victor



-- p
-- template: centered

This `-- p`` uses a `-- template:`` 

attribute to call a different template

that centers the text


-- section/
-- title: This Is The Section Title Attribute

NOTE: Because these sections are nested the source 
gets repeated inside each one.

-- div/
-- class: nested_wrapper

-- div

This is a <<em|red>> div

-- div

This is a green div

-- div

This is a blue div

-- /div

This is the content after the parent div
wrapper is closed

-- /section

And this is the content of the ending
`-- /section``


-- css
-- template: show
-- title: Inline Content CSS For The Above Nested Divs
-- preface: This CSS comes directly from the content
-- preface: file and gets embedded into the head
-- preface: of the document on rendering

.nested_wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
}

.nested_wrapper div:nth-child(1) {
    color: red;
}

.nested_wrapper div:nth-child(2) {
    color: green;
}

.nested_wrapper div:nth-child(3) {
    color: blue;
}


-- checklist
-- title: This is a checklist

[] the

[x] quick

[] brown 

[] fox

-- h2

Head Content

Content can be placed directly into the head
of the document with the `-- head`` tag. This
is how the p5.js script for the next example
gets loaded


-- head
-- template: show

<script src="/_assets/p5/p5.min.js"></script>


-- h2

HTML (show-below example)

-- html
-- template: show-below
-- preface: This HTML (and script) is from directly inside
-- preface: the content file. It gets embedded into the page
-- preface: as is, and then a syntax highlighted version
-- preface: of the code is output below it

<div class="example center">
  <div id="p5_output"></div>
</div>

<script>
  let rad = 20
  let xpos, ypos
  let xspeed = 2.8
  let yspeed = 2.2
  let xdirection = 1
  let ydirection = 1

  function setup() {
    var canvas = createCanvas(300, 100)
    canvas.parent('p5_output')
    noStroke()
    frameRate(30)
    ellipseMode(RADIUS)
    xpos = width / 2
    ypos = height / 2
  }

  function draw() {
    background(101)
    xpos = xpos + xspeed * xdirection
    ypos = ypos + yspeed * ydirection
    if (xpos > width - rad || xpos < rad) {
      xdirection *= -1
    }
    if (ypos > height - rad || ypos < rad) {
      ydirection *= -1
    }
    ellipse(xpos, ypos, rad, rad)
  }
</script>


-- blockquote
-- by: Some Author
-- title: Blockquote Test
-- url: https://www.example.com
-- source: Some place

This is a block quote

with a couple of <<em|styled paragraphs|class: green>> in it



-- p
-- id: id_example
-- title: Script ID Target Example

This is a p with an `id`` on it. The 
color gets updated randomly by the 
script below


-- script
-- template: show
-- title: Script Id Target Code

const letters = [
  "3", "5", "7", "9", "a", "c", "e"
]

const hc = () => Math.floor(Math.random() * letters.length)
const clr = () => {
  return `#${hc()}${hc()}${hc()}`
}

document.addEventListener("DOMContentLoaded", () => {
    const id_example = document.getElementById("id_example")
    const intervalHolder = setInterval(() => {
        id_example.style.color = clr()
    }, 4000)
})


-- code
-- javascript

const thingThing = () => {
    const thing = "This is a test of syntax highlighting"
}

-- code
-- rust

fn main() {
    let text = r#"
And this it to make sure code highlighting
works for different languages
and with a example results below"#;
    println!(text);
}

-- results/

And this it to make sure code highlighting
works for different languages
and with a example results below

-- /results



-- random_color_circle
-- title: Text Based Plugin Example
-- preface: This section calls out to an external process that
-- preface: generates a random color and returns it as a string which
-- preface: gets used to set the color of the SVG


-- random_color_circle
-- params: --base
-- params: green
-- title: Text Based Plugin With Parameters
-- preface: This version passes parameters to the external
-- preface: plugin


-- css
-- template: show
-- title: Page CSS
-- preface: This is the rest of the CSS for the page

.red {
  color: red;
}

.green {
  color: green;
}

.blue {
  color: blue;
}



-- tldr/

Everything here is made from Neopolitan files
and templates. No JavaScript is involved
except that which is added directly inside the 
content itself (which you'll see below). 

This TL;DR is part of the test. It's at the bottom
of the source file but moved the top by the template. Any 
section can be moved to any place the same way.

-- /tldr


-- /code

-- metadata
-- date: 2024-01-19 00:55:49
-- id: 2ba2pzhp
-- type: integration
-- status: published


